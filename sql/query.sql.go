// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: query.sql

package sql

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO UserT(
    userName, pwd, role
) VALUES (
  $1, $2, $3
)
RETURNING id
`

type CreateUserParams struct {
	Username string
	Pwd      string
	Role     int16
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (int64, error) {
	row := q.db.QueryRow(ctx, createUser, arg.Username, arg.Pwd, arg.Role)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const deleteUser = `-- name: DeleteUser :exec
UPDATE UserT
  set deleted_date= NOW(),
  last_modified_date = NOW()
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id, role, deleted_date FROM  UserT
WHERE userName=$1 AND pwd=$2 LIMIT 1
`

type GetUserParams struct {
	Username string
	Pwd      string
}

type GetUserRow struct {
	ID          int64
	Role        int16
	DeletedDate pgtype.Timestamp
}

func (q *Queries) GetUser(ctx context.Context, arg GetUserParams) (GetUserRow, error) {
	row := q.db.QueryRow(ctx, getUser, arg.Username, arg.Pwd)
	var i GetUserRow
	err := row.Scan(&i.ID, &i.Role, &i.DeletedDate)
	return i, err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE UserT
  set userName= $2,
  pwd = $3,
  role = $4,
  last_modified_date = NOW()
WHERE id = $1
`

type UpdateUserParams struct {
	ID       int64
	Username string
	Pwd      string
	Role     int16
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.Exec(ctx, updateUser,
		arg.ID,
		arg.Username,
		arg.Pwd,
		arg.Role,
	)
	return err
}
