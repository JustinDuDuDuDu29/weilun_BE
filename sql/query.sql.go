// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: query.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createAdmin = `-- name: CreateAdmin :one
INSERT INTO UserT(
    userName, pwd, name, role, belongcmp, phoneNum
) VALUES (
  $1, $2, $3, $4, $5, $6
)
RETURNING id
`

type CreateAdminParams struct {
	Username  string
	Pwd       string
	Name      string
	Role      int16
	Belongcmp pgtype.Int8
	Phonenum  interface{}
}

func (q *Queries) CreateAdmin(ctx context.Context, arg CreateAdminParams) (int64, error) {
	row := q.db.QueryRow(ctx, createAdmin,
		arg.Username,
		arg.Pwd,
		arg.Name,
		arg.Role,
		arg.Belongcmp,
		arg.Phonenum,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const createCmpAdmin = `-- name: CreateCmpAdmin :one
INSERT INTO UserT(
    userName, pwd, name, role, belongcmp, phoneNum
) VALUES (
  $1, $2, $3, $4, $5, $6
)
RETURNING id
`

type CreateCmpAdminParams struct {
	Username  string
	Pwd       string
	Name      string
	Role      int16
	Belongcmp pgtype.Int8
	Phonenum  interface{}
}

func (q *Queries) CreateCmpAdmin(ctx context.Context, arg CreateCmpAdminParams) (int64, error) {
	row := q.db.QueryRow(ctx, createCmpAdmin,
		arg.Username,
		arg.Pwd,
		arg.Name,
		arg.Role,
		arg.Belongcmp,
		arg.Phonenum,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const createDriver = `-- name: CreateDriver :one
with createUser as (
    INSERT INTO UserT(
        userName, pwd, name, role, belongcmp, phoneNum
        ) VALUES (
        $1, $2, $3, $4, $5, $6
    )
    RETURNING id
)

insert into driverT (userid, percentage, nationalidnumber) 
	(select o.id, v.percentage, v.nationalidnumber
	from createUser o
	cross join(
		values 
		($7, $8)
	) as v (percentage, nationalidnumber))
RETURNING userid
`

type CreateDriverParams struct {
	Username  string
	Pwd       string
	Name      string
	Role      int16
	Belongcmp pgtype.Int8
	Phonenum  interface{}
	Column7   interface{}
	Column8   interface{}
}

func (q *Queries) CreateDriver(ctx context.Context, arg CreateDriverParams) (pgtype.Int8, error) {
	row := q.db.QueryRow(ctx, createDriver,
		arg.Username,
		arg.Pwd,
		arg.Name,
		arg.Role,
		arg.Belongcmp,
		arg.Phonenum,
		arg.Column7,
		arg.Column8,
	)
	var userid pgtype.Int8
	err := row.Scan(&userid)
	return userid, err
}

const deleteUser = `-- name: DeleteUser :exec
UPDATE UserT
  set deleted_date= NOW(),
  last_modified_date = NOW()
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id, role, deleted_date FROM  UserT
WHERE userName=$1 AND pwd=$2 LIMIT 1
`

type GetUserParams struct {
	Username string
	Pwd      string
}

type GetUserRow struct {
	ID          int64
	Role        int16
	DeletedDate pgtype.Timestamp
}

func (q *Queries) GetUser(ctx context.Context, arg GetUserParams) (GetUserRow, error) {
	row := q.db.QueryRow(ctx, getUser, arg.Username, arg.Pwd)
	var i GetUserRow
	err := row.Scan(&i.ID, &i.Role, &i.DeletedDate)
	return i, err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE UserT
  set userName= $2,
  pwd = $3,
  role = $4,
  last_modified_date = NOW()
WHERE id = $1
`

type UpdateUserParams struct {
	ID       int64
	Username string
	Pwd      string
	Role     int16
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.Exec(ctx, updateUser,
		arg.ID,
		arg.Username,
		arg.Pwd,
		arg.Role,
	)
	return err
}
