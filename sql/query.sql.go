// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: query.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createAdmin = `-- name: CreateAdmin :one
INSERT INTO UserT(
    pwd, name, role, belongcmp, phoneNum
) VALUES (
  $1, $2, $3, $4, $5
)
RETURNING id
`

type CreateAdminParams struct {
	Pwd       string
	Name      string
	Role      int16
	Belongcmp pgtype.Int8
	Phonenum  interface{}
}

func (q *Queries) CreateAdmin(ctx context.Context, arg CreateAdminParams) (int64, error) {
	row := q.db.QueryRow(ctx, createAdmin,
		arg.Pwd,
		arg.Name,
		arg.Role,
		arg.Belongcmp,
		arg.Phonenum,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const createDriverInfo = `-- name: CreateDriverInfo :one
insert into driverT (userid, percentage, nationalidnumber) 
    values ($1, $2, $3)
RETURNING userid
`

type CreateDriverInfoParams struct {
	Userid           pgtype.Int8
	Percentage       int16
	Nationalidnumber interface{}
}

func (q *Queries) CreateDriverInfo(ctx context.Context, arg CreateDriverInfoParams) (pgtype.Int8, error) {
	row := q.db.QueryRow(ctx, createDriverInfo, arg.Userid, arg.Percentage, arg.Nationalidnumber)
	var userid pgtype.Int8
	err := row.Scan(&userid)
	return userid, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO UserT(
    pwd, name, role, belongcmp, phoneNum
) VALUES (
  $1, $2, $3, $4, $5
)
RETURNING id
`

type CreateUserParams struct {
	Pwd       string
	Name      string
	Role      int16
	Belongcmp pgtype.Int8
	Phonenum  interface{}
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (int64, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Pwd,
		arg.Name,
		arg.Role,
		arg.Belongcmp,
		arg.Phonenum,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const deleteCmp = `-- name: DeleteCmp :exec
UPDATE cmpt
  set deleted_date= NOW(),
  last_modified_date = NOW()
WHERE id = $1
`

func (q *Queries) DeleteCmp(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteCmp, id)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
UPDATE UserT
  set deleted_date= NOW(),
  last_modified_date = NOW()
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const getAllCmp = `-- name: GetAllCmp :many
SELECT id, name, create_date, deleted_date, last_modified_date from cmpt
`

func (q *Queries) GetAllCmp(ctx context.Context) ([]Cmpt, error) {
	rows, err := q.db.Query(ctx, getAllCmp)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Cmpt
	for rows.Next() {
		var i Cmpt
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreateDate,
			&i.DeletedDate,
			&i.LastModifiedDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCmp = `-- name: GetCmp :one
SELECT cmpt.id, cmpt.name, cmpt.create_date, cmpt.deleted_date, cmpt.last_modified_date, usert.id, phonenum, pwd, usert.name, belongcmp, role, initpwdchanged, usert.create_date, usert.deleted_date, usert.last_modified_date FROM cmpt
inner join usert
on cmpt.id = usert.belongcmp AND (usert.role=200 OR usert.role=100)
where cmpt.id = $1
`

type GetCmpRow struct {
	ID                 int64
	Name               string
	CreateDate         pgtype.Timestamp
	DeletedDate        pgtype.Timestamp
	LastModifiedDate   pgtype.Timestamp
	ID_2               int64
	Phonenum           interface{}
	Pwd                string
	Name_2             string
	Belongcmp          pgtype.Int8
	Role               int16
	Initpwdchanged     bool
	CreateDate_2       pgtype.Timestamp
	DeletedDate_2      pgtype.Timestamp
	LastModifiedDate_2 pgtype.Timestamp
}

func (q *Queries) GetCmp(ctx context.Context, id int64) (GetCmpRow, error) {
	row := q.db.QueryRow(ctx, getCmp, id)
	var i GetCmpRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreateDate,
		&i.DeletedDate,
		&i.LastModifiedDate,
		&i.ID_2,
		&i.Phonenum,
		&i.Pwd,
		&i.Name_2,
		&i.Belongcmp,
		&i.Role,
		&i.Initpwdchanged,
		&i.CreateDate_2,
		&i.DeletedDate_2,
		&i.LastModifiedDate_2,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, role, deleted_date FROM  UserT
WHERE phoneNum=$1 AND pwd=$2 LIMIT 1
`

type GetUserParams struct {
	Phonenum interface{}
	Pwd      string
}

type GetUserRow struct {
	ID          int64
	Role        int16
	DeletedDate pgtype.Timestamp
}

func (q *Queries) GetUser(ctx context.Context, arg GetUserParams) (GetUserRow, error) {
	row := q.db.QueryRow(ctx, getUser, arg.Phonenum, arg.Pwd)
	var i GetUserRow
	err := row.Scan(&i.ID, &i.Role, &i.DeletedDate)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, phonenum, pwd, name, belongcmp, role, initpwdchanged, create_date, deleted_date, last_modified_date from UserT where id=$1
`

func (q *Queries) GetUserByID(ctx context.Context, id int64) (Usert, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i Usert
	err := row.Scan(
		&i.ID,
		&i.Phonenum,
		&i.Pwd,
		&i.Name,
		&i.Belongcmp,
		&i.Role,
		&i.Initpwdchanged,
		&i.CreateDate,
		&i.DeletedDate,
		&i.LastModifiedDate,
	)
	return i, err
}

const newCmp = `-- name: NewCmp :one
INSERT INTO cmpt (name) values ($1) RETURNING id
`

func (q *Queries) NewCmp(ctx context.Context, name string) (int64, error) {
	row := q.db.QueryRow(ctx, newCmp, name)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const updateCmp = `-- name: UpdateCmp :exec
UPDATE cmpt
  set deleted_date= NOW(),
  last_modified_date = NOW()
WHERE id = $1
`

func (q *Queries) UpdateCmp(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, updateCmp, id)
	return err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE UserT
  set 
  pwd = $2,
  role = $3,
  last_modified_date = NOW()
WHERE id = $1
`

type UpdateUserParams struct {
	ID   int64
	Pwd  string
	Role int16
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.Exec(ctx, updateUser, arg.ID, arg.Pwd, arg.Role)
	return err
}
